name: Tests and Code Coverage Back

on:
  push:
    branches: [ "main" ] 
  pull_request:
    branches: [ "main" ] 

jobs:
  build_backend:
    runs-on: ubuntu-latest  # Sp√©cifie que le job s'ex√©cutera sur une machine virtuelle Ubuntu

    steps:
      # √âtape 1 : Afficher un message pour indiquer le lancement des tests Maven pour le backend
      - run: echo "Launching Mvn Test on Backend source code"

      # √âtape 2 : Cloner le d√©p√¥t avec l'action checkout (permet d'acc√©der au code source du repository)
      - uses: actions/checkout@v3

      # √âtape 3 : Configurer JDK 11 pour le projet Java
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'  # Utilisation de la version 11 de Java
          distribution: 'temurin'  # Distribution AdoptOpenJDK (Temurin)
          cache: maven  # Mise en cache des d√©pendances Maven pour acc√©l√©rer les builds futurs
      
      # √âtape 4 : Construction et ex√©cution des tests Maven
      - name: Build with Maven
        working-directory: ${{ github.workspace }}/back  # Sp√©cifie le r√©pertoire backend pour la construction
        run: mvn clean test --file pom.xml  # Ex√©cute les tests Maven et g√©n√®re les rapports de couverture
      
      # √âtape 5 : V√©rification du rapport JaCoCo pour s'assurer que la couverture de code a √©t√© g√©n√©r√©e
      - name: Check JaCoCo Report
        run: cat ${{ github.workspace }}/back/target/site/jacoco/jacoco.xml  # Affiche le rapport JaCoCo pour la couverture des tests
      
      # √âtape 6 : Ajouter le rapport de couverture JaCoCo √† la plateforme GitHub (par exemple, pour afficher dans les PRs)
      - name: Add coverage
        id: jacoco
        uses: madrapps/jacoco-report@v1.6.1  # Utilisation d'un action GitHub pour t√©l√©charger et afficher les rapports JaCoCo
        with:
          paths: |
            ${{ github.workspace }}/back/target/site/jacoco/jacoco.xml  # Chemin vers le rapport JaCoCo
          token: ${{ secrets.GITHUB_TOKEN }}  # Utilisation du token GitHub pour authentifier l'action
          title: Code Coverage  # Titre de l'affichage du rapport de couverture
          min-coverage-overall: 80  # D√©finir un seuil de couverture globale √† 80%
          min-coverage-changed-files: 80  # D√©finir un seuil de couverture pour les fichiers modifi√©s √† 80%
          pass-emoji: üçè  # Emoji pour indiquer un test r√©ussi (vert)
          fail-emoji: ‚ùå  # Emoji pour indiquer un test √©chou√© (rouge)
          debug-mode: false  # D√©sactivation du mode d√©bogage pour un affichage normal des r√©sultats
      
      # √âtape 7 : Affichage de la couverture globale
      - run: echo "Total coverage ${{ steps.jacoco.outputs.coverage-overall }}"  # Affiche la couverture totale apr√®s les tests

      # √âtape 8 : Affichage de la couverture des fichiers modifi√©s
      - run: echo "Changed Files coverage ${{ steps.jacoco.outputs.coverage-changed-files }}"  # Affiche la couverture des fichiers modifi√©s uniquement

      # √âtape 9 : Commit du rapport de couverture dans le d√©p√¥t, pour qu'il soit visible sur GitHub
      - name: Commit Jacoco Code Coverage Report
        run: |
          # Configure l'identit√© Git pour l'utilisateur qui fait le commit
          git config --global user.email "benyahia.zaim@gmail.com"
          git config --global user.name "zcbe"
          
          # R√©cup√®re les derni√®res modifications du d√©p√¥t pour √©viter les conflits
          git fetch
          git checkout main  # Bascule sur la branche "main"
          git pull origin main  # R√©cup√®re les derni√®res modifications depuis le d√©p√¥t distant
          
          # Ajoute les fichiers de couverture g√©n√©r√©s √† Git
          git add -f back/target/site/jacoco  # Force l'ajout du r√©pertoire JaCoCo (sinon il peut √™tre ignor√© par .gitignore)
          
          # Commit le rapport de couverture avec un message sp√©cifique
          git commit -m "Add Jacoco code coverage report"
          
          # Pousse le commit vers la branche "main" du d√©p√¥t distant
          git push origin main  # Pousse le rapport sur GitHub pour qu'il soit visible
